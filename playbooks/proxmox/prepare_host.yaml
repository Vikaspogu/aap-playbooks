---
- name: Playbook to Proxmox
  hosts: proxmox
  gather_facts: false
  vars_files:
    - ../../vars/proxmox.yaml
  tasks:
    - name: Prepare proxmox
      notify:
        - Reboot
      block:
        - name: Disable IPv6
          ansible.posix.sysctl:
            name: '{{ item }}'
            value: '1'
            sysctl_set: true
            state: present
          loop:
            - net.ipv6.conf.all.disable_ipv6
            - net.ipv6.conf.default.disable_ipv6
            - net.ipv6.conf.lo.disable_ipv6

        - name: Upgrade all system packages
          ansible.builtin.apt:
            upgrade: full
            update_cache: true
            cache_valid_time: 3600
            autoclean: true
            autoremove: true
          register: apt_upgrade
          retries: 5
          until: apt_upgrade is success

        - name: Upgrade the OS (apt-get dist-upgrade)
          ansible.builtin.apt:
            upgrade: dist
          register: apt_dist_upgrade
          retries: 5
          until: apt_dist_upgrade is success

        - name: Install common packages
          ansible.builtin.apt:
            name:
              - ethtool
            install_recommends: false
            update_cache: true
            cache_valid_time: 3600
            autoclean: true
            autoremove: true
          register: apt_install_common
          retries: 5
          until: apt_install_common is success

        - name: Check if automation role exists
          ansible.builtin.shell: pveum role list
          register: pvenum_role
          changed_when: false

        - name: Create automation role
          ansible.builtin.shell: pveum role add AutomationProv -privs "VM.Allocate VM.Clone VM.Config.CDROM VM.Config.CPU VM.Config.Cloudinit VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Monitor VM.Audit VM.PowerMgmt Datastore.AllocateSpace Datastore.Audit Sys.Modify SDN.Use"
          when: '"AutomationProv" not in pvenum_role.stdout'

        - name: Check if automation user exists
          ansible.builtin.shell: pveum user list
          register: pvenum_user
          changed_when: false

        - name: Only when user doesn't exist
          when: '"{{ datacenter.username }}@pve" not in pvenum_user.stdout'
          block:
            - name: Create automation user
              ansible.builtin.shell: pveum user add {{ datacenter.username }}@pve --password {{ datacenter.password }}
            - name: Access control
              ansible.builtin.shell: pveum aclmod / -user {{ datacenter.username }}@pve -role AutomationProv

        - name: Check whether interfaces contains offloading feature
          command: grep -Fxq "pre-up /sbin/ethtool --offload vmbr0 gso off tso off sg off gro off" /etc/network/interfaces
          register: check_offloading_feature
          check_mode: false
          ignore_errors: true
          changed_when: false

        - name: Disable offloading features
          ansible.builtin.lineinfile:
            path: /etc/network/interfaces
            regex: '^bridge-fd 0$'
            line: |
              pre-up /sbin/ethtool --offload vmbr0 gso off tso off sg off gro off
              pre-up /sbin/ethtool --offload enp0s25 gso off tso off sg off gro off
          when: check_offloading_feature.rc == 1

        - name: Ensure iommu is enabled in default grub command line
          ansible.builtin.lineinfile:
            path: '/etc/default/grub'
            backrefs: true
            regexp: '^#?(GRUB_CMDLINE_LINUX_DEFAULT=.*)quiet"$'
            line: '\1quiet intel_iommu=on"'
          register: iommu_result

        - name: Ensure vfio modules are loaded at boot
          ansible.builtin.lineinfile:
            path: '/etc/modules'
            line: '{{ item }}'
          register: vfio_result
          with_items:
            - vfio
            - vfio_iommu_type1
            - vfio_pci
            - vfio_virqfd

        - name: Ensure graphics drivers are blacklisted
          ansible.builtin.lineinfile:
            path: '/etc/modprobe.d/blacklist.conf'
            create: true
            line: 'blacklist {{ item }}'
          register: drivers_result
          with_items:
            - radeon
            - nouveau
            - nvidia

        - name: Ensure unsafe interrupts are allowed
          ansible.builtin.lineinfile:
            path: '/etc/modprobe.d/iommu_unsafe_interrupts.conf'
            create: true
            line: 'options vfio_iommu_type1 allow_unsafe_interrupts=1'
          register: unsafe_interrupts_result

        - name: Update grub configuration (need reboot if changes)
          ansible.builtin.shell: update-grub
          register: pci_grub_result
          when: iommu_result.changed or
            vfio_result.changed or
            drivers_result.changed or
            unsafe_interrupts_result.changed
          failed_when: pci_grub_result.rc != 0
          changed_when: pci_grub_result.rc == 0

  handlers:
    - name: Reboot
      ansible.builtin.reboot:
